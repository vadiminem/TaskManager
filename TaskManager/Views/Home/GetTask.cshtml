@model TaskManager.Models.DbTask;
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
if(!ViewData["Layout"])
    Layout = null;
    string status = null; 

    switch(status)
    {
        case @Model.Status.Assigned:
status = Localizer["TaskStatusAssigned"];
             break;
case @Model.Status.InProgress:
status = Localizer["TaskStatusInProgress"];
             break;
case @Model.Status.Paused:
status = Localizer["TaskStatusPaused"];
             break;
case @Model.Status.Completed:
status = Localizer["TaskStatusCompleted"];
             break;

    }
}


<div class="control-panel">
    <a asp-controller="Home" asp-action="Create" asp-route-id="@Model.Id">@Localizer["AddSubtask"]</a>
    <a asp-controller="Home" asp-action="ChangeStatus">@status</a>
    <a asp-controller="Home" asp-action="ChangeStatus" asp-route-status="@Model.Status">@Localizer["EndTask"]</a>
    <a asp-controller="Home" asp-action="Edit" asp-route-id="@Model.Id">@Localizer["EditTask"]</a>
    <a asp-controller="Home" asp-action="Remove" asp-route-id="@Model.Id">@Localizer["RemoveTask"]</a>
</div>
<div class="task-content">
    <h1 class="task-name">@Model.Name</h1>
    <h3></h3>
    <p class="task-description">@Model.Description</p>
    <p class="task-performers">@Model.Performers</p>
    <p class="task-dates">с @Model.RegistrationDate до @Model.EndDate</p>
    <p class="task-status"><b>@Model.Status</b></p>
    <p class="task-labour-input">@Model.LabourInput</p>
    <p class="task-lead-time">@Model.LeadTime</p>
</div>

